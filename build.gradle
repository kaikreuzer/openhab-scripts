import groovy.json.*
import java.util.regex.Pattern
import java.util.regex.Matcher

task buildChangelog {

  mkdir 'build'

  def outputText = ""
  def stringsFile = new File("./build/changelog.md")

  def openHABMilestone = "2.5"
  def legacyMilestone = "1.14.0"
  def eclipseFromDate = "2018-12-16"
  def eclipseToDate = "2019-12-15"
  def mergedString = "%20is:merged"

  def fullChangeList = []
  
  def categories = [
    [
      "name" : "Runtime",
      "type" : "core",
      "orgName" : "openhab",
      "milestone" : "${openHABMilestone}",
      "repos" : [
        [
          "name" : "openhab-distro"
        ],[
          "name" : "openhab-core"
        ]
      ]
    ],[
      "name" : "2.x Add-ons",
      "type" : "2.x add-ons",
      "orgName" : "openhab",
      "milestone" : "${openHABMilestone}",
      "repos" : [
        [
          "name" : "openhab2-addons",
        ],[
          "name" : "openhab-webui",
        ],[
          "name" : "org.openhab.ui.habmin",
          "addonName" : "HABmin"
        ],[
          "name" : "org.openhab.ui.habpanel",
          "addonName" : "HABPanel"
        ],[
          "name" : "org.openhab.ui.habot",
          "addonName" : "HABot"
        ],[
          "name" : "org.openhab.binding.zigbee",
          "addonName" : "Zigbee"
        ],[
          "name" : "org.openhab.binding.zwave",
          "addonName" : "ZWave"
        ]
      ]
    ],[
      "name" : "1.x Legacy Add-ons",
      "orgName" : "openhab",
      "type" : "1.x legacy add-ons",
      "milestone" : "${legacyMilestone}",
      "repos" : [
        [
          "name" : "openhab1-addons"
        ]
      ]
    ],[
      "name" : "Eclipse SmartHome",
      "orgName" : "eclipse",
      "type" : "mixed",
      "milestone" : "",
      "repos": [
        [
          "name" :"smarthome",
          "label" : "%20label:%22New%20Contribution%22"
        ],[
          "name" :"smarthome",
          "label" : "%20label:%22enhancement%22"
        ],[
          "name" :"smarthome",
          "label" : "%20label:%22bug%22"
        ]
      ]      
    ]
  ]


  categories.each { category ->

    def pullRequests
    def milestone = category.milestone
    def milestoneString = ""
    if (milestone != "") {milestoneString = "%20milestone:%22${milestone}%22"}
    def orgName = category.orgName

    category.repos.each { repo ->

      def curlURL = ""
      def labelString = ""
      def repoName = repo.name
      def addonName = repo.addonName

      if (repoName == "smarthome") {
        mergedString = "%20merged:${eclipseFromDate}..${eclipseToDate}"
        labelString = repo.label
      }

      def searchesLeft = 1
      def pageNumber = 1
      def pageString = ""

      while (searchesLeft > 0) {
        curlURL = "https://api.github.com/search/issues?q=repo:${orgName}/${repoName}%20is:pr${mergedString}${milestoneString}${labelString}&per_page=100${pageString}"
        print "Parsing: ${orgName}/${repoName} (Milestone ${milestone}, Page ${pageNumber}"
        def curlOutput = new ByteArrayOutputStream()
        exec {
          commandLine "curl", "${curlURL}"
          standardOutput = curlOutput
          errorOutput = new ByteArrayOutputStream()
        }
        exec {
          commandLine "sleep", "10"
        }
        def jsonSlurper = new JsonSlurper()
        def searchResults = jsonSlurper.parseText(curlOutput.toString())
        
        searchResults.items.each{pullRequest ->
          def pullTitle = pullRequest.title
          def pullNumber = pullRequest.number
          def pullURL = pullRequest.html_url
          def pullCategory = category.type
          def pullAddon = ""
          def docsURL = ""
          def pullType = ""
          def addonType = ""

          // Assign the addon name
          Pattern pattern = Pattern.compile("\\[(.*?)\\](.*)")
          Matcher matcher = pattern.matcher(pullTitle)

          if (matcher.find()) {
            pullAddon = matcher.group(1)
            pullTitle = matcher.group(2)
          } else if (repo.addonName) {
            pullAddon = repo.addonName
          } else {
            pullAddon = "Misc"
          }

          // Assign the pull request type (bug, enhancment etc)
          pullRequest.labels.each { label ->
            switch(label.name.toLowerCase())
            {
              case "bug":
                pullType="bug"
                break
              case "enhancement":
                pullType="enhancement"
                break
              case ~/^new(.+)/:
                if (repoName == "openhab-core") {
                  pullType="feature"
                  pullAddon="core"
                } else {
                  def addonTypeURL
                  pullType = "new"
                  addonType = Matcher.lastMatcher[0][1].trim().capitalize()
                  if (addonType == "Contribution"){ addonType = "Binding" }
                  if ((addonType != "Voice") && (addonType != "Persistence")) {
                    addonTypeURL = (addonType + "s").toLowerCase()
                  } else {
                    addonTypeURL = addonType.toLowerCase()
                  }
                  docsURL = "https://www.openhab.org/addons/${addonTypeURL}/${pullAddon}/"
                
                  def url = docsURL.toURL()
                  Pattern htmlPattern = Pattern.compile(".*<title>(.*) - .* \\| openHAB<\\/title>")
                  try {
                    Matcher htmlMatcher = htmlPattern.matcher(url.text)
                    if (htmlMatcher.find()) {
                      pullAddon = htmlMatcher.group(1)
                    }
                  } catch (FileNotFoundException e) {
                    println "  Warning: New contribution PR #${pullNumber} does not have a [name]..."
                  }
                }
                break
            }
          }

          // Try to sort the Eclipse/SmartHome repo into other categories
          if (((repoName == "smarthome") || (repoName == "openhab-core")) && ((pullType == "bug") || (pullType == "enhancement") || (pullType == "feature"))) {
            if ((pullAddon == "Misc") || (pullAddon.toLowerCase() == "core")) {
              pullCategory = "core"
              pullAddon = "Core"
            } else {
              pullCategory = "2.x add-ons"
            }
          }

          // Add PR to full changelog list
          if (pullType != "") {
          fullChangeList << [
            "category" : "${pullCategory}",
            "type" : "${pullType}",
            "addon" : "${pullAddon}",
            "description" : "${pullTitle}",
            "number" : "${pullNumber}",
            "url" : "${pullURL}",
            "docs" : "${docsURL}",
            "class" : "${addonType}"
          ]
          }
        }

        // If there"s more pages to go, search these too
        if (pageString == "") {
          def resultsFound = searchResults.total_count
          println ", Pull Requests Found: ${resultsFound})"
          if (resultsFound > 100) {
            searchesLeft = Math.ceil(resultsFound/100)
          }
        } else {
          println ")"
        }
        searchesLeft = searchesLeft - 1
        pageNumber = pageNumber + 1
        pageString = "&page=${pageNumber}"
      }
    }
  }

  // The following code can be used to save and restore previous grabs for debugging
  /*
  def changeFile = new File("./build/changeList.lst")
  changeFile.text = new JsonBuilder(fullChangeList).toString()
  */
  /*
  def changeFileText = new File("./build/changeList.lst").text
  fullChangeList = new JsonSlurper().parseText(changeFileText)
  */

  outputText = outputText + "## openHAB ${openHABMilestone} Changelog\n\n"
  outputText = outputText + "### New Add-ons\n\n"
  outputText = outputText + "The following add-ons are newly introduced with the ${openHABMilestone} release:\n\n"
  outputText = outputText + "| Add-on | Type | Issue |\n"
  outputText = outputText + "|-|-|-|\n"

  def sortedList = fullChangeList.findAll{it.type == "new"}.sort{it.addon.toLowerCase()}

  sortedList.each {
    outputText = outputText + "| [**${it.addon}**](${it.docs}) | ${it.class} | [#${it.number}](${it.url}) |\n"
  }

  outputText = outputText + "\nThe following improvements were also made:\n"
  
  ["Core", "2.x Add-ons", "1.x Legacy Add-ons"].each {categoryName ->

    if (categoryName == "Core") {
      outputText = outputText + "\n### Runtime\n\n"
      outputText = outputText + "| Type | Issue | Change |\n"
      outputText = outputText + "|-|-|-|\n"
    } else {
    outputText = outputText + "\n### ${categoryName}\n\n"
    outputText = outputText + "| Add-on | Type | Issue | Change |\n"
    outputText = outputText + "|-|-|-|-|\n"
    }
    sortedList = fullChangeList.findAll{it.type != "new"}.findAll{it.category == "${categoryName.toLowerCase()}"}.sort{it.type}.reverse().sort{it.addon.toLowerCase()}

    def previousType = ""
    def previousAddon = ""
    sortedList.each {
      def addonText = ""
      def typeText = ""

      if (it.addon.toLowerCase() != previousAddon) {
        addonText = "**" + "${it.addon}" + "**"
        previousType = ""
        if (categoryName == "Core") {
          outputText = outputText + "| | | |\n"
        } else {
          outputText = outputText + "| | | | |\n"
        }
      }
      if (it.type != previousType) {
        switch (it.type){
          case "bug":
            typeText = "Bug Fixes"
            break
          case "enhancement":
            typeText = "Enhancements"
            break
          case "feature":
            typeText = "New Feature"
            break
        }
        typeText = "*" + "${typeText}" + "*"
      } 

      if (categoryName == "Core") {
        outputText = outputText + "| ${typeText} | [${it.number}](${it.url}) | ${it.description} |\n"
      } else {
        outputText = outputText + "| ${addonText} | ${typeText} | [${it.number}](${it.url}) | ${it.description} |\n"
      }
      previousAddon = it.addon.toLowerCase()
      previousType = it.type
    }
  }
    stringsFile.text = outputText
}
